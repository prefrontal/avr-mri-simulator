
SerialCom328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002a4  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000081  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b9  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000050d  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000019b  00000000  00000000  00001057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016d  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000188  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  8e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:
char responseC[] = "3";
char responseD[] = "4";

void USART_init (void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALE >> 8);
  96:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALE);
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 0x00;
  a0:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	80 93 c2 00 	sts	0x00C2, r24
}
  b0:	08 95       	ret

000000b2 <USART_send>:

void USART_send (unsigned char data)
{
	while ( !(UCSR0A & (1<<UDRE0)) );
  b2:	90 91 c0 00 	lds	r25, 0x00C0
  b6:	95 ff       	sbrs	r25, 5
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <USART_send>
	UDR0 = data;
  ba:	80 93 c6 00 	sts	0x00C6, r24
}
  be:	08 95       	ret

000000c0 <USART_putstring>:

void USART_putstring(char* StringPtr)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	c8 2f       	mov	r28, r24
  c6:	d9 2f       	mov	r29, r25
	while (*StringPtr != 0x00)  //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
  c8:	02 c0       	rjmp	.+4      	; 0xce <USART_putstring+0xe>
	{    
		USART_send(*StringPtr);  //Using the simple send function we send one char at a time
  ca:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while (*StringPtr != 0x00)  //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
  ce:	89 91       	ld	r24, Y+
  d0:	88 23       	and	r24, r24
  d2:	d9 f7       	brne	.-10     	; 0xca <USART_putstring+0xa>
	{    
		USART_send(*StringPtr);  //Using the simple send function we send one char at a time
		StringPtr++;			 //We increment the pointer so we can read the next char
	}        
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <runSequence1500>:

void runSequence1500 ()
{
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	int buttonID = 1;
  e2:	c1 e0       	ldi	r28, 0x01	; 1
  e4:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) // Infinite loop
	{        
		USART_putstring (trigger);
		PORTC = 0b00000001;
  e6:	01 e0       	ldi	r16, 0x01	; 1
		{
			USART_putstring (responseD);
			buttonID = 1;
		}
		
		PORTC = 0b00000100;
  e8:	14 e0       	ldi	r17, 0x04	; 4
{
	int buttonID = 1;
	
	while(1) // Infinite loop
	{        
		USART_putstring (trigger);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
		PORTC = 0b00000001;
  f2:	08 b9       	out	0x08, r16	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	90 e7       	ldi	r25, 0x70	; 112
  f8:	a2 e0       	ldi	r26, 0x02	; 2
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <runSequence1500+0x20>
 102:	00 c0       	rjmp	.+0      	; 0x104 <runSequence1500+0x2a>
 104:	00 00       	nop
		_delay_ms (50);
		PORTC = 0b00000000;
 106:	18 b8       	out	0x08, r1	; 8
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	98 ef       	ldi	r25, 0xF8	; 248
 10c:	a5 e1       	ldi	r26, 0x15	; 21
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	a0 40       	sbci	r26, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <runSequence1500+0x34>
 116:	00 c0       	rjmp	.+0      	; 0x118 <runSequence1500+0x3e>
 118:	00 00       	nop
		_delay_ms (450);  
		
		if (1 == buttonID)
 11a:	c1 30       	cpi	r28, 0x01	; 1
 11c:	d1 05       	cpc	r29, r1
 11e:	39 f4       	brne	.+14     	; 0x12e <runSequence1500+0x54>
		{
			USART_putstring (responseA);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 128:	c2 e0       	ldi	r28, 0x02	; 2
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	1d c0       	rjmp	.+58     	; 0x168 <runSequence1500+0x8e>
		}
		else if (2 == buttonID)
 12e:	c2 30       	cpi	r28, 0x02	; 2
 130:	d1 05       	cpc	r29, r1
 132:	39 f4       	brne	.+14     	; 0x142 <runSequence1500+0x68>
		{
			USART_putstring (responseB);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 13c:	c3 e0       	ldi	r28, 0x03	; 3
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	13 c0       	rjmp	.+38     	; 0x168 <runSequence1500+0x8e>
		}
		else if (3 == buttonID)
 142:	c3 30       	cpi	r28, 0x03	; 3
 144:	d1 05       	cpc	r29, r1
 146:	39 f4       	brne	.+14     	; 0x156 <runSequence1500+0x7c>
		{
			USART_putstring (responseC);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 150:	c4 e0       	ldi	r28, 0x04	; 4
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	09 c0       	rjmp	.+18     	; 0x168 <runSequence1500+0x8e>
		}
		else if (4 == buttonID)
 156:	c4 30       	cpi	r28, 0x04	; 4
 158:	d1 05       	cpc	r29, r1
 15a:	31 f4       	brne	.+12     	; 0x168 <runSequence1500+0x8e>
		{
			USART_putstring (responseD);
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			buttonID = 1;
 164:	c1 e0       	ldi	r28, 0x01	; 1
 166:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		PORTC = 0b00000100;
 168:	18 b9       	out	0x08, r17	; 8
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	90 e7       	ldi	r25, 0x70	; 112
 16e:	a2 e0       	ldi	r26, 0x02	; 2
 170:	81 50       	subi	r24, 0x01	; 1
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	a0 40       	sbci	r26, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <runSequence1500+0x96>
 178:	00 c0       	rjmp	.+0      	; 0x17a <runSequence1500+0xa0>
 17a:	00 00       	nop
		_delay_ms (50);
		PORTC = 0b00000000;
 17c:	18 b8       	out	0x08, r1	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	92 e6       	ldi	r25, 0x62	; 98
 182:	ae e2       	ldi	r26, 0x2E	; 46
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	a0 40       	sbci	r26, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <runSequence1500+0xaa>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <runSequence1500+0xb4>
 18e:	00 00       	nop
 190:	ac cf       	rjmp	.-168    	; 0xea <runSequence1500+0x10>

00000192 <runSequence2000>:
		_delay_ms (950);  		
	}
}

void runSequence2000 ()
{
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	int buttonID = 1;
 19a:	c1 e0       	ldi	r28, 0x01	; 1
 19c:	d0 e0       	ldi	r29, 0x00	; 0

	while(1) // Infinite loop
	{        
		USART_putstring (trigger);
		PORTC = 0b00000001;
 19e:	01 e0       	ldi	r16, 0x01	; 1
		{
			USART_putstring (responseD);
			buttonID = 1;
		}
		
		PORTC = 0b00000100;
 1a0:	14 e0       	ldi	r17, 0x04	; 4
{
	int buttonID = 1;

	while(1) // Infinite loop
	{        
		USART_putstring (trigger);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
		PORTC = 0b00000001;
 1aa:	08 b9       	out	0x08, r16	; 8
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	90 e7       	ldi	r25, 0x70	; 112
 1b0:	a2 e0       	ldi	r26, 0x02	; 2
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	a0 40       	sbci	r26, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <runSequence2000+0x20>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <runSequence2000+0x2a>
 1bc:	00 00       	nop
		_delay_ms (50);
		PORTC = 0b00000000;
 1be:	18 b8       	out	0x08, r1	; 8
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	98 ef       	ldi	r25, 0xF8	; 248
 1c4:	a5 e1       	ldi	r26, 0x15	; 21
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	a0 40       	sbci	r26, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <runSequence2000+0x34>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <runSequence2000+0x3e>
 1d0:	00 00       	nop
		_delay_ms (450);  
		
		if (1 == buttonID)
 1d2:	c1 30       	cpi	r28, 0x01	; 1
 1d4:	d1 05       	cpc	r29, r1
 1d6:	39 f4       	brne	.+14     	; 0x1e6 <runSequence2000+0x54>
		{
			USART_putstring (responseA);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 1e0:	c2 e0       	ldi	r28, 0x02	; 2
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <runSequence2000+0x8e>
		}
		else if (2 == buttonID)
 1e6:	c2 30       	cpi	r28, 0x02	; 2
 1e8:	d1 05       	cpc	r29, r1
 1ea:	39 f4       	brne	.+14     	; 0x1fa <runSequence2000+0x68>
		{
			USART_putstring (responseB);
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 1f4:	c3 e0       	ldi	r28, 0x03	; 3
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <runSequence2000+0x8e>
		}
		else if (3 == buttonID)
 1fa:	c3 30       	cpi	r28, 0x03	; 3
 1fc:	d1 05       	cpc	r29, r1
 1fe:	39 f4       	brne	.+14     	; 0x20e <runSequence2000+0x7c>
		{
			USART_putstring (responseC);
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			++buttonID;
 208:	c4 e0       	ldi	r28, 0x04	; 4
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	09 c0       	rjmp	.+18     	; 0x220 <runSequence2000+0x8e>
		}
		else if (4 == buttonID)
 20e:	c4 30       	cpi	r28, 0x04	; 4
 210:	d1 05       	cpc	r29, r1
 212:	31 f4       	brne	.+12     	; 0x220 <runSequence2000+0x8e>
		{
			USART_putstring (responseD);
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_putstring>
			buttonID = 1;
 21c:	c1 e0       	ldi	r28, 0x01	; 1
 21e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		PORTC = 0b00000100;
 220:	18 b9       	out	0x08, r17	; 8
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	90 e7       	ldi	r25, 0x70	; 112
 226:	a2 e0       	ldi	r26, 0x02	; 2
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	a0 40       	sbci	r26, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <runSequence2000+0x96>
 230:	00 c0       	rjmp	.+0      	; 0x232 <runSequence2000+0xa0>
 232:	00 00       	nop
		_delay_ms (50);
		PORTC = 0b00000000;
 234:	18 b8       	out	0x08, r1	; 8
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	9c ec       	ldi	r25, 0xCC	; 204
 23a:	a6 e4       	ldi	r26, 0x46	; 70
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	a0 40       	sbci	r26, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <runSequence2000+0xaa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <runSequence2000+0xb4>
 246:	00 00       	nop
 248:	ac cf       	rjmp	.-168    	; 0x1a2 <runSequence2000+0x10>

0000024a <main>:
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	99 e6       	ldi	r25, 0x69	; 105
 24e:	a8 e1       	ldi	r26, 0x18	; 24
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x6>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x10>
 25a:	00 00       	nop
{
	// Startup delay 
	_delay_ms (500); 

	// Initialize the UART for serial communication
	USART_init ();
 25c:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	
	// Set PORTD as input
	DDRD = 0b00000000;
 260:	1a b8       	out	0x0a, r1	; 10
	
	// Set PORTC as output with all pins low
	DDRC = 0b11111111;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
 266:	18 b8       	out	0x08, r1	; 8
	
	while (1) // Infinite Loop
	{
		if (0 == (PIND & 0b00000100))  // 2000ms
 268:	4a 99       	sbic	0x09, 2	; 9
 26a:	0c c0       	rjmp	.+24     	; 0x284 <main+0x3a>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	99 e6       	ldi	r25, 0x69	; 105
 270:	a8 e1       	ldi	r26, 0x18	; 24
 272:	81 50       	subi	r24, 0x01	; 1
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	a0 40       	sbci	r26, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x28>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x32>
 27c:	00 00       	nop
		{
			_delay_ms (500);
			runSequence2000();
 27e:	0e 94 c9 00 	call	0x192	; 0x192 <runSequence2000>
 282:	f2 cf       	rjmp	.-28     	; 0x268 <main+0x1e>
		}
		else if (0 == (PIND & 0b00001000))  // 1500ms
 284:	4b 99       	sbic	0x09, 3	; 9
 286:	f0 cf       	rjmp	.-32     	; 0x268 <main+0x1e>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	99 e6       	ldi	r25, 0x69	; 105
 28c:	a8 e1       	ldi	r26, 0x18	; 24
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x44>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x4e>
 298:	00 00       	nop
		{
			_delay_ms (500);
			runSequence1500();
 29a:	0e 94 6d 00 	call	0xda	; 0xda <runSequence1500>
 29e:	e4 cf       	rjmp	.-56     	; 0x268 <main+0x1e>

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
